// Generated by CoffeeScript 1.4.0
(function() {
  var characterStyles, convertTag, deleteNonExistStyle, eraseTag, errorMsg, main, paragraphStyles;

  paragraphStyles = {
    title: "タイトル",
    author: "著者",
    h1: "大見出し",
    h2: "中見出し",
    h3: "小見出し",
    qt: "引用",
    qt_right: "引用右揃え"
  };

  characterStyles = {
    b: "太文字",
    dot: "圏点",
    tate: "縦中横",
    en: "英字",
    90: "90度回転"
  };

  main = function() {
    var myStory, _i, _len, _ref;
    if (app.documents.length === 0) {
      errorMsg('ドキュメントが開かれていません。');
    } else {
      paragraphStyles = deleteNonExistStyle(paragraphStyles, "paragraph");
      characterStyles = deleteNonExistStyle(characterStyles, "character");
      _ref = app.activeDocument.stories;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        myStory = _ref[_i];
        convertTag(myStory);
      }
    }
  };

  convertTag = function(story) {
    var basicStyle, cStyle, cStyleName, ed, myObj, obj, pStyle, pStyleName, s, st, tagName, text, _i, _j, _len, _len1, _ref, _ref1;
    basicStyle = app.activeDocument.paragraphStyles.item("基本");
    _ref = story.paragraphs;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (s.appliedParagraphStyle.index === 0) {
        s.applyParagraphStyle(basicStyle);
      }
    }
    for (tagName in paragraphStyles) {
      pStyleName = paragraphStyles[tagName];
      pStyle = app.activeDocument.paragraphStyles.item(pStyleName);
      while (story.contents.search(RegExp("<" + tagName + ">(.*)?<\\/" + tagName + ">")) !== -1) {
        text = story.contents;
        st = text.search(RegExp("<" + tagName + ">"));
        ed = text.search(RegExp("<\\/" + tagName + ">"));
        obj = story.characters.itemByRange(st, ed);
        _ref1 = obj.paragraphs;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          myObj = _ref1[_j];
          myObj.applyParagraphStyle(pStyle);
        }
        eraseTag(story, tagName.length, st, ed);
      }
    }
    while (story.contents.search(RegExp("<" + tagName + ">(.*)?<\\/" + tagName + ">")) !== -1) {
      text = story.contents;
      st = text.search(RegExp("<" + tagName + ">"));
      ed = text.search(RegExp("<\\/" + tagName + ">"));
      obj = story.characters.itemByRange(st, ed);
      obj.applyCharacterStyle(cStyle);
    }
    for (tagName in characterStyles) {
      cStyleName = characterStyles[tagName];
      cStyle = app.activeDocument.characterStyles.item(cStyleName);
      while (story.contents.search(RegExp("<" + tagName + ">(.*)?<\\/" + tagName + ">")) !== -1) {
        text = story.contents;
        st = text.search(RegExp("<" + tagName + ">"));
        ed = text.search(RegExp("<\\/" + tagName + ">"));
        obj = story.characters.itemByRange(st, ed);
        obj.applyCharacterStyle(cStyle);
        eraseTag(story, tagName.length, st, ed);
      }
    }
  };

  eraseTag = function(story, tagLength, st, ed) {
    story.characters.itemByRange(ed, ed + tagLength + 2).remove();
    story.characters.itemByRange(st, st + tagLength + 1).remove();
  };

  deleteNonExistStyle = function(styles, kind) {
    var style, styleName, tagName;
    for (tagName in styles) {
      styleName = styles[tagName];
      if (kind === "paragraph") {
        style = app.activeDocument.paragraphStyles.item(styleName);
      } else {
        style = app.activeDocument.characterStyles.item(styleName);
      }
      try {
        style.name;
      } catch (err) {
        alert("" + (kind === "paragraph" ? "段落" : "文字") + "スタイル'" + styleName + "'が存在しません。");
        delete styles[tagName];
      }
    }
    return styles;
  };

  errorMsg = function(str) {
    alert(str);
    exit();
  };

  main();

}).call(this);
