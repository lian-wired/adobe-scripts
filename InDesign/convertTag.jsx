// Generated by CoffeeScript 1.4.0
(function() {
  var characterStyles, convertTag, deleteNonExistStyle, errorMsg, main, paragraphStyles, resetFindChangeGrep;

  paragraphStyles = {
    title: "タイトル",
    author: "著者",
    h1: "大見出し",
    h2: "中見出し",
    h3: "小見出し",
    qt: "引用",
    qt_right: "引用右揃え"
  };

  characterStyles = {
    b: "太文字",
    dot: "圏点",
    tate: "縦中横",
    en: "英字",
    90: "90度回転"
  };

  main = function() {
    var basicStyle, cStyleName, pStyleName, s, story, style, tag, _i, _j, _len, _len1, _ref, _ref1;
    if (app.documents.length === 0) {
      errorMsg('ドキュメントが開かれていません。');
    } else {
      resetFindChangeGrep();
      paragraphStyles = deleteNonExistStyle(paragraphStyles, "paragraph");
      characterStyles = deleteNonExistStyle(characterStyles, "character");
      _ref = app.activeDocument.stories;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        story = _ref[_i];
        basicStyle = app.activeDocument.paragraphStyles.item("基本");
        _ref1 = story.paragraphs;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          s = _ref1[_j];
          if (s.appliedParagraphStyle.index === 0 || s.appliedParagraphStyle.index === 1) {
            s.applyParagraphStyle(basicStyle);
          }
        }
        for (tag in paragraphStyles) {
          pStyleName = paragraphStyles[tag];
          style = app.activeDocument.paragraphStyles.item(pStyleName);
          convertTag(story, tag, style, "paragraph");
        }
        for (tag in characterStyles) {
          cStyleName = characterStyles[tag];
          style = app.activeDocument.characterStyles.item(cStyleName);
          convertTag(story, tag, style, "paragraph");
        }
      }
      resetFindChangeGrep();
    }
  };

  convertTag = function(story, tag, style, kind) {
    var changeTo, foundItem, foundItems, foundTags, str, _i, _j, _len, _len1;
    app.findGrepPreferences.findWhat = "<" + tag + ">(.*)?<\/" + tag + ">";
    foundItems = story.findGrep();
    if (foundItems.length !== 0) {
      foundTags = [];
      for (_i = 0, _len = foundItems.length; _i < _len; _i++) {
        foundItem = foundItems[_i];
        foundTags.push(foundItem.contents);
      }
      for (_j = 0, _len1 = foundTags.length; _j < _len1; _j++) {
        str = foundTags[_j];
        app.findTextPreferences.findWhat = str;
        if (kind === "paragraph") {
          app.changeTextPreferences.appliedParagraphStyle = style;
        } else {
          app.changeTextPreferences.appliedCharacterStyle = style;
        }
        changeTo = str.match(RegExp("<" + tag + ">(.*)?<\\/" + tag + ">"))[1];
        app.changeTextPreferences.changeTo = changeTo;
        story.changeText();
      }
    }
  };

  deleteNonExistStyle = function(styles, kind) {
    var style, styleName, tag;
    for (tag in styles) {
      styleName = styles[tag];
      if (kind === "paragraph") {
        style = app.activeDocument.paragraphStyles.item(styleName);
      } else {
        style = app.activeDocument.characterStyles.item(styleName);
      }
      try {
        style.name;
      } catch (err) {
        alert("" + (kind === "paragraph" ? "段落" : "文字") + "スタイル'" + styleName + "'が存在しません。");
        delete styles[tag];
      }
    }
    return styles;
  };

  resetFindChangeGrep = function() {
    app.findGrepPreferences = NothingEnum.nothing;
    return app.changeGrepPreferences = NothingEnum.nothing;
  };

  errorMsg = function(str) {
    alert(str);
    exit();
  };

  main();

}).call(this);
